<?php

namespace OC\PlatformBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
	public function myFindAll()
	{
		return $this
		->createQueryBuilder('a')
		->getQuery()
		->getResult()
		;
	}
	public function myFindOne($id)
	{
		$qb = $this->createQueryBuilder('a');
		
		$qb
			->where('a.id = :id')
			->setParameter('id',$id)
		;
		
		return $qb
			->getQuery()
			->getResult()
		;
	}
	public function findByAuthorAndDate($author, $year)
	{
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.author = :author')
			->setParameter('author',$author)
		->andWhere('a.date < :year')
			->setParameter("year",$year)
		->OrderBy('a.date','DESC')
		;
		return $qb
			->getQuery()
			->getResult()
		;
	}
	
	public function whereCurrentYear(QueryBuilder $qb)
	{
		$qb
			->andWhere('a.date BETWEEN :start AND :end')
			->setParameter('start', new \Datetime(date('Y').'-01-01'))
			->setParameter('end', new \Datetime(date('Y').'-12-31'))
		;
	}
	
	public function myFind()
	{
		$qb = $this->createQueryBuilder("a");
		$qb
			->where("a.author = :author")
			->setParameter("author","Alexandre")
		;
		//On applique notre condition sur le QueryBuilder
		$this->whereCurrentYear($qb);
		
		//On peut ajouter ce que l'on veut après
		$qb->orderBy("a.date","DESC");
		
		return $qb
			->getQuery()
			->getResult()
		;
	}
	
	public function myFindAllDQL()
	{
		$query = $this->_em->createQuery("SELECT a FROM OCPlatformBundle:Advert a");
		$results = $query->getResult();
		return $results;
	}
	
	public function myFindDQL($id)
	{
		$query = $this->_em->createQuery("SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id");
		$query->setParameter("id",$id);
		
		return $query->getResult();
	}
	
	public function getAdvertWithApplications()
	{
		$qb = $this
			->createQueryBuilder("a")
			->leftJoin("a.applications","app")
			->addSelect("app")
		;
		return $qb
			->getQuery()
			->getResult()
		;
	}
	
	public function getAdvertWithCategories(array $categoryNames)
	{
		$qb = $this->createQueryBuilder("a");
		$qb
			->join("a.categories","c")
			->addSelect("c")
		;
		$qb->where($qb->expr()->in('c.name',$categoryNames));
		return $qb
			->getQuery()
			->getResult()
		;	
	}
	
	public function updateAdvert()
	{
		$qb = $this->_em->createQueryBuilder();
		$q = $qb->update('OCPlatformBundle:Advert','a')
				->set('a.author','?1')
				->where('a.id = ?2')
				->setParameter(1,'Paul')
				->setParameter(2,'8')
				->getQuery();
		$p = $q->execute();
		$this->_em->flush();
	}
	
	public function getAdverts($page, $nbPerPage)
	{
		$query = $this->createQueryBuilder('a')
		//Jointure sur l'attribut image
		->leftJoin('a.image','i')
		->addSelect('i')
		//Jointure sur l'attribut categories
		->leftJoin('a.categories','c')
		->addSelect('c')
		->orderBy('a.date','DESC')
		->getQuery()
		;
		$query
			//On définit l'annonce à partir de laquelle commencer la liste
			->setFirstResult(($page-1) * $nbPerPage)
			//Ainsi que le nombre d'annonces à afficher sur une page
			->setMaxResults($nbPerPage)
		;
		//Enfin, on retourne l'objet Paginator correspondant à la requête construite
		//N'oubliez pas le use correspondant en début de fichier
		//return $query->getResult();
		return new Paginator($query,true);
	}
	
	public function getPublishedQueryBuilder()
	{
		return $this
		->createQueryBuilder('a')
		->where('a.published = :published')
		->setParameter('published',true);
	}
}
